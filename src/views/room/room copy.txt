<!--
 * @Author: hua
 * @Date: 2019-02-26 09:08:43
 * @description: 开云支付核心页面
 * @LastEditors: Howard hua 584425439@qq.com
 * @LastEditTime: 2024-01-27 21:11:31
 -->
<template>
  <div style="font-size: 0;" id="msg_empty">
    <div v-if="menuVisible" class="menu_container" :style="'top:' + menuTop + 'px;right:1.4rem'">
      <yd-grids-group :rows="3">
        <yd-grids-item @click.native="handleCopy" v-if="this.currentKey.type != IMG">
          <span slot="text">复制</span>
        </yd-grids-item>
        <yd-grids-item @click.native="handleCallBackMsg">
          <span slot="text">撤回</span>
        </yd-grids-item>
        <yd-grids-item @click.native="handleResetSend">
          <span slot="text">重发</span>
        </yd-grids-item>
        <yd-grids-item @click.native="handleOcr" v-if="this.currentKey.type == IMG">
          <span slot="text">识别</span>
        </yd-grids-item>
      </yd-grids-group>
    </div>
    <!-- 内容 -->
    <mescroll-vue :up="mescrollUp" :down="mescrollDown" @init="mescrollInit" @touchstart="closeDefIconsShow()">
      <div class="mscroll-container">
        <!-- 更多消息提示 -->
        <div v-show="moreInfoShow" class="more_info" @click="$router.push({ name: 'roomMsgList' })">
          更多消息，请
          <span class="primary_color">打开消息记录</span>
        </div> 
        <ul>
          <li v-for="(key, index) in msgList" :key="index">
            <div class="format_time" v-if="index > 0 && key.created_at > parseInt(msgList[index - 1].created_at) + 60">
              {{ formatTime(key.created_at) }}</div>
            <div class="chat-item" v-if="(key.user_id == userInfo.id) && (key.user_type != 1)">
              <div class="mychat">
                <!-- 消息送达状�?-->
                <span v-if="key.send_status == LOADING" class="send_status loading_color rotate_loading">
                  <yd-icon name="refresh"></yd-icon>
                </span>
                <span @click="reSendMsg(key)" v-if="key.send_status == FAIL" class="send_status color_danger">
                  <yd-icon name="error"></yd-icon>
                </span>
                <role-avatar 
                  :imgUrl="key.head_img" 
                  role="user" 
                  size="medium" 
                  :forceDefault="true"
                  class="img" 
                />
                <div class="nt">
                  <span v-html="key.name"></span>
                </div>
                <div v-if="key.type == RECORD" class="msg" @touchstart="amrPlay(JSON.parse(key.msg), index)">
                  <img class="vioce_start" style="margin-right:-3px" :src="'static/img/voice_left.gif'"
                    v-show="JSON.parse(key.msg)['status']" />
                  <i class="vioce_stop_left" v-show="!JSON.parse(key.msg)['status']"></i>
                  <span class="vioce_second">{{ JSON.parse(key.msg)['duration'] }}s</span>
                </div>
                <div v-on:click="handleDefsForSelf(key)" v-else-if="key.type == TEXT" class="rawMsg" v-html="key.msg"></div>
                <div  @touchstart="ocrStart(key,$event)" @touchend="ocrEnd" v-else-if="key.type == IMG" class="rawMsg" v-html="key.msg"></div>
                <div v-else-if="key.type == FILE" class="rawMsg" @click="handleDefMsg(key.msg)">
                  [文件]{{ formatFileName(key.msg) }}</div>
                <div v-else-if="key.type == RECALL" class="format_recall">{{ key.msg }}</div>
                <div v-else class="msg" v-html="key.msg"></div>
                <!-- 消息读取状态键盘输入时更新-->
                <!--  <span class="read_status" v-if="key.send_status == SUCCESS && currentRoomType == 0">
                  <yd-badge v-if="key.read_status == 0">未读</yd-badge>
                  <yd-badge v-else type="primary">已读</yd-badge>
                </span>-->
              </div>
            </div>
            <div class="chat-item" v-else>
              <div class="otherchat">
                <role-avatar 
                  :imgUrl="key.head_img" 
                  role="service" 
                  size="medium" 
                  :forceDefault="true"
                  class="img" 
                />
                <div class="nt">
                  <span v-html="key.name"></span>
                </div>
                <div v-if="key.type == RECORD" class="msg" @touchstart="amrPlay(JSON.parse(key.msg), index)">
                  <img class="chat_right vioce_start" :src="'static/img/voice_right.gif'"
                    v-show="JSON.parse(key.msg)['status']" />
                  <i class="vioce_stop_right" v-show="!JSON.parse(key.msg)['status']"></i>
                  <span class="vioce_second">{{ JSON.parse(key.msg)['duration'] }}s</span>
                </div>
                <div v-else-if="key.type == TEXT" class="rawMsg" v-html="key.msg" v-on:click="handleDefsForOther(key)">
                </div>
                <div @touchstart="ocrStart(key.msg)" @touchend="ocrEnd" v-else-if="key.type == IMG" class="rawMsg"
                  v-html="key.msg"></div>
                <div v-else-if="key.type == FILE" class="rawMsg" @click="handleDefMsg(key.msg)">
                  [文件]{{ formatFileName(key.msg) }}</div>
                <div v-else class="msg" v-html="key.msg"></div>
              </div>
            </div>
          </li>
        </ul>
        <!-- 暂无消息 -->
        <vEmpty v-if="msgList.length == 0 && isEmpty"></vEmpty>
      </div>
    </mescroll-vue>
    <!-- 语音输入gif�?-->
    <img v-show="recordingShow" class="recording" :src="'static/img/recording.png'" />
    <!-- 输入 -->
    <inputWrapper :style="iconsShow || defsShow ? 'bottom:200px' : 'bottom:0rem'" @handleRecordShow="handleRecordShow"
      @closeDefIconsShow="closeDefIconsShow" @handleIconsShow="handleIconsShow" @handleDefsShow="handleDefsShow"
      @sendMsg="sendMsg" @handleImgOnChange="handleImgOnChange" @handleFileOnChange="handleFileOnChange"
      @handleContent="handleContent" @handleStartRecord="handleStartRecord" @onFocus="handleOnFocus"
      @onBlur="handleOnblur" :recordShow="recordShow" :content="content" :touched="touched" :sendShow="sendShow">
    </inputWrapper>
    <!-- 表情 -->
    <icons @recInsertIcon="insertIcon" v-if="iconsShow" />
    <!-- 功能�?-->
    <def v-show="defsShow" />
    <!-- 裁剪�?-->
    <cropperBox v-if="cropperShow" :reqImgData="reqImgData" @recReqImgData="recReqImgData"
      @recCropperShow="recCropperShow" />
  </div>
</template>
<script>
/* 重新设计输入�?*/
import Vue from "vue";
import { mapGetters, mapMutations } from "vuex";
import vImg from "@/components/v-img/v-img";
import roleAvatar from "@/components/role-avatar/role-avatar";
import vEmpty from "@/components/v-empty/v-empty";
import inputWrapper from "./components/input-wrapper/input-wrapper";
import icons from "./components/icons/icons";
import def from "./components/def/def";
import cropperBox from "./components/cropperBox/cropperBox";
import MescrollVue from "mescroll.js/mescroll.vue";
import { uploadFile } from "@/socketioApi/common";
import utils from "@/utils/utils";
import { recOpen, recStart, recStop } from "@/utils/recorder";
import storage from "@/utils/localstorage";
import { getLocalRoomMsg } from "@/utils/indexedDB";
import { getCloudRoomMsg } from "@/socketioApi/room";
import {
  Confirm,
  Alert,
  Toast,
  Notify,
  Loading
} from "vue-ydui/dist/lib.rem/dialog";
import { send } from "@/utils/socketio";
import { stopVideo, hangUp } from "@/utils/webRtc.js";
import { chatSend, reChatSend, ocr } from "@/socketIoApi/chat";
import axios from "axios";
import lrz from "lrz";
export default {
  components: {
    MescrollVue,
    vImg,
    roleAvatar,
    icons,
    def,
    cropperBox,
    vEmpty,
    inputWrapper
  },
  computed: {
    ...mapGetters([
      "msgList",
      "currentRoomUuid",
      "currentRoomName",
      "currentRoomType",
      "userInfo",
      "htmlFontSize",
      "currentRoomSaveAction",
      "RECORD",
      "RECALL",
      "TEXT",
      /* "RESEND", */
      "IMG",
      "FILE",
      "LOADING",
      "SUCCESS",
      "FAIL",
      "CHAT_VIDEO",
      "LOCAL"
    ])
  },
  data() {
    return {
      menuTop: 0,
      menuVisible: false,
      currentKey: {},
      uuidVal: "",
      scroll: "",
      content: "",
      isEmpty: true,
      isPartChatPage: false,
      iconsShow: false,
      defsShow: false,
      sendShow: false,
      recordShow: false,
      recordingShow: false,
      touched: false,
      cropperShow: false,

      moreInfoShow: false,
      onFocusLock: false,
      clientHeight: 0,
      data: [],
      reqImgData: {
        url: process.env.VUE_APP_CLIENT_SOCKET,
        imgDatas: ""
      },



        textInOffset: "下拉加载", // 下拉初始文案
        textOutOffset: "释放下拉加载", // 下拉刷新完成文案
        textLoading: "下拉加载�?.." // 下拉加载中文�?      },
      ocrLoop: null
    };
  },
  created() { },
  mounted() {
    this.init();
    // 添加滚动监控
    this.$nextTick(() => {
      if (this.$refs.mescroll) {
        console.log('mescroll实例已创建，开始监控滚�?);
      }
    });
  },
  beforeRouteEnter(to, from, next) {
    //to.meta.title = to.query.name;
    next(vm => {
      vm.$refs.mescroll && vm.$refs.mescroll.beforeRouteEnter(); // 进入路由�?滚动到原来的列表位置,恢复回到顶部按钮和isBounce的配�?    });
  },
  beforeRouteLeave(to, from, next) {
    this.$refs.mescroll && this.$refs.mescroll.beforeRouteLeave(); // 退出路由时,记录列表滚动的位�?隐藏回到顶部按钮和isBounce的配�?    next();
  },
  destroyed() {
    if (Vue.prototype.$preview.self) {
      Vue.prototype.$preview.self.close();
    }
    chatSend({
      data: {
        msg: JSON.stringify({ type: "end" }),
        room_uuid: this.currentRoomUuid,
        type: this.CHAT_VIDEO,
        save_action: this.LOCAL
      }
    });
    stopVideo();
    hangUp();
    send("leave", { room_uuid: this.currentRoomUuid });
  },
  activated() {
    window.physicsBackRouter = "/home";
  },
  methods: {
    ...mapMutations({
      updateMsgList: "updateMsgList"
    }),
    init() {
      this.clientHeight = document.body.clientHeight;
      this.mescrollDom = document.getElementsByClassName("mescroll")[0];
      this.isPartChatPage = false;
      if (window.plus) {
        window.r = plus.audio.getRecorder();
      }
      new Swiper(".swiper-cont", {
        loop: false,
        autoplay: false, //可选选项，自动滑�?        // 如果需要分页器
        pagination: {
          el: ".swiper-pagination",
          clickable: true
        },
        observer: true,
        observeParents: true
      });

      this.handleHeightToBottom();
      window.onresize = () => {
        /* const activeElement = document.activeElement
        if (activeElement.tagName === 'DIV') {
          setTimeout(() => {
            activeElement.scrollIntoView(false)
          }, 100)
        } */

        this.isEmpty = false;
        if (document.body.clientHeight < this.clientHeight) {
          /* if(this.iconsShow ==true || this.defsShow ==true){
            setTimeout(() => {
              this.isPartChatPage = 'keyborad'
              this.handleHeightToBottom()
              this.handleSendShow();
            }, 50);
          }else{ */
          this.isPartChatPage = "keyborad";
          this.handleHeightToBottom();
          this.handleSendShow();
          //}
        } else {
          if (this.iconsShow !== true && this.defsShow !== true) {
            this.isPartChatPage = false;
          }
          this.handleHeightToBottom();
          this.handleSendShow();
        }
      };
    },
    upCallback(mescroll) {
      console.log('上拉加载触发，使用this.mescroll');
      
      // 使用this.mescroll而不是参数mescroll
      const mescrollInstance = this.mescroll;
      if (!mescrollInstance) {
        console.error('this.mescroll未定�?);
        return;
      }
      
      // 使用mescrollUp的页码配�?      const pageNum = this.mescrollUp.page.num;
      const pageSize = this.mescrollUp.page.size;
      
      console.log('上拉加载页码:', pageNum, '每页大小:', pageSize);
      
      // 上拉加载更多消息
      if (this.currentRoomSaveAction == 0) {
        // 从本地数据库加载
        getLocalRoomMsg(
          this.currentRoomUuid,
          pageNum,
          pageSize
        ).then(res => {
          let msgList = JSON.parse(JSON.stringify(this.msgList));
          // 上拉加载历史数据，添加到列表前面
          // 历史数据按时间正序排列，最新的历史消息在最�?          msgList = res.list.concat(msgList);
          this.updateMsgList(msgList);
          this.$nextTick(() => {
            if (msgList.length >= res.total) {
              mescrollInstance.endSuccess(res.list.length);
            } else {
              mescrollInstance.endSuccess(res.list.length);
            }
            this.handleHeightToBottom();
          });
        }).catch(err => {
          console.error('本地数据加载失败:', err);
          mescrollInstance.endErr();
        });
      } else if (this.currentRoomSaveAction == 1) {
        // 从云端API加载
        getCloudRoomMsg({
          room_uuid: this.currentRoomUuid,
          page_no: pageNum,
          per_page: pageSize
        }).then(res => {
          if (res.error_code === 200 && res.data && res.data.list) {
            let msgList = JSON.parse(JSON.stringify(this.msgList));
            let rawList = res.data.list;
            rawList.map(item => {
              item["msg"] = item["formatMsg"];
              delete item["formatMsg"];
              return item;
            });
            // 上拉加载历史数据，添加到列表前面
            // 历史数据按时间正序排列，最新的历史消息在最�?            msgList = rawList.concat(msgList);
            this.updateMsgList(msgList);
            this.$nextTick(() => {
              if (msgList.length >= res.data.page.count) {
                mescrollInstance.endSuccess(rawList.length);
              } else {
                mescrollInstance.endSuccess(rawList.length);
              }
              this.handleHeightToBottom();
            });
          } else {
            mescrollInstance.endErr();
          }
        }).catch(err => {
          console.error('云端数据加载失败:', err);
          mescrollInstance.endErr();
        });
      }
    },
    handleOnScroll(mescroll) {
      this.menuVisible = false;
      
      // 获取滚动信息
      const scrollTop = mescroll ? mescroll.getScrollTop() : 0;
      const scrollHeight = mescroll ? mescroll.getScrollHeight() : 0;
      const clientHeight = mescroll ? mescroll.getClientHeight() : 0;
      
      // 更新滚动信息
      this.scrollInfo = {
        scrollTop: scrollTop,
        scrollHeight: scrollHeight,
        clientHeight: clientHeight,
        isNearBottom: scrollTop + clientHeight >= scrollHeight - 50,
        isNearTop: scrollTop <= 50
      };
      
      // 控制台输出滚动信�?      console.log('滚动监控:', {
        scrollTop: scrollTop,
        scrollHeight: scrollHeight,
        clientHeight: clientHeight,
        isNearBottom: this.scrollInfo.isNearBottom,
        isNearTop: this.scrollInfo.isNearTop,
        messageCount: this.msgList.length
      });
      
      // 如果接近顶部，触发下拉加�?      if (this.scrollInfo.isNearTop && !this.lockDown) {
        console.log('接近顶部，准备触发下拉加�?);
        // 手动触发下拉加载
        if (this.mescroll) {
          this.mescroll.triggerDownScroll();
        }
      }
      
      // 如果接近底部，可以触发上拉加�?      if (this.scrollInfo.isNearBottom) {
        console.log('接近底部，可以触发上拉加�?);
      }
    },
    handleCallBackMsg() {
      Confirm({
        title: '提示',
        mes: '只能撤回远端记录，确认撤回？',
        opts: [
          {
            txt: '取消',
            color: false,
            callback: () => {
              this.menuVisible = false;
            }
          },
          {
            txt: '确定',
            color: true,
            callback: () => {
              let data = JSON.parse(JSON.stringify(this.currentKey));
              data['type'] = this.RECALL;
              data['msg'] = "您撤回了一条消�?;
              this.reSendMsg(data);
              this.menuVisible = false;
            }
          }
        ]
      });
    },
    handleCopy() {
      this.$copyText(this.currentKey.msg).then((e) => {
        Toast({
          mes: "复制成功",
          icon: "success"
        });
        this.menuVisible = false;

      }, (e) => {
        Toast({
          mes: "复制失败",
          icon: "error",
          timeout: 1500
        });
        this.menuVisible = false;

      })

    },
    handleResetSend() {
      this.menuVisible = false;
      this.reSendMsg(this.currentKey);
    },
    handleOcr() {
      Loading.open("识别�?..")
      ocr({"img_path":this.formatImgPath(this.currentKey.msg)}).then(res=>{
        let content = "";
        res.data.data.forEach(item=>{
          content += item[1][0]+"<br>";
        })
        Alert({
          mes: `${content}`
        });
        Loading.close();
        this.menuVisible = false;
      }).catch(()=>{
        Loading.close();
        this.menuVisible = false;
      })
    },
    ocrStart(item, event) {
      clearTimeout(this.loop); //再次清空定时器，防止重复注册定时�?      this.menuTop = event.touches[0].clientY;
      this.currentKey = item;
      console.log("this.currentKey",this.currentKey)
      this.loop = setTimeout(() => {
        //if(!this.isClicked) {
          console.log("长按�?);
          this.menuVisible = true
            // ocr(this.formatImgPath(msg)).then(res=>{
            //   console.log(res)
            // })
          //}
      }, 1000);
    },
    ocrEnd() {
      clearTimeout(this.loop); 
    },
    handleDefsForSelf(item) {
      console.log(event, item);
      this.menuVisible = true;
      this.menuTop = event.clientY;
      this.currentKey = item;
    },
    handleDefsForOther(item) {
      this.$copyText(item.msg).then((e) => {
        Toast({
          mes: "复制成功",
          icon: "success"
        });

      }, (e) => {
        Toast({
          mes: "复制失败",
          icon: "error",
          timeout: 1500
        });

      })
    },
    handleOnFocus(e) {
      setTimeout(() => {
        e.target.scrollIntoView(true);
        if (!this.onFocusLock) {
          this.onFocusLock = true;
          send(
            "input",
            { room_uuid: this.currentRoomUuid, even: "focus" },
            "broadcast"
          );
          console.log('handleOnFocus')
        }
      }, 300)
    },
    handleOnblur() {
      console.log('handleOnblur')
      this.onFocusLock = false;
      send(
        "input",
        { room_uuid: this.currentRoomUuid, even: "blur" },
        "broadcast"
      );
    },
    handleHeightToBottom() {
      if (this.isPartChatPage == false) {
        this.mescrollDom.style.height =
          document.body.clientHeight - this.htmlFontSize * 2 + "px";
      } else if (this.isPartChatPage == "keyborad") {
        this.mescrollDom.style.height =
          document.body.clientHeight - this.htmlFontSize * 2 + "px";
      } else {
        this.mescrollDom.style.height =
          document.body.clientHeight - this.htmlFontSize * 2 - 200 + "px";
      }
      this.menuVisible = false;
      this.handleMsgListToBottom(100);
    },
    mescrollInit(mescroll) {
      this.mescroll = mescroll;
    },
        downCallback(mescroll) {
      console.log('下拉加载触发，页�?', this.mescrollDown.page.num, 'lockDown:', this.lockDown);
      if (this.mescrollDown.page.num > 1) {
        this.lockDown = true;
      }
      if (this.currentRoomSaveAction == 0) {
        getLocalRoomMsg(
          this.currentRoomUuid,
          this.mescrollDown.page.num,
          this.mescrollDown.page.size
        ).then(res => {
          let msgList = JSON.parse(JSON.stringify(this.msgList));
          // 下拉加载新消息，添加到列表后�?          // 新消息按时间正序排列，最新的消息在最�?          msgList = msgList.concat(res.list);
          this.updateMsgList(msgList);
          this.$nextTick(() => {
            if (
              msgList.length >= res.total ||
              this.mescrollDown.page.num > 3
            ) {
              this.moreInfoShow = true;
              mescroll.lockDownScroll(true);
            }
            mescroll.endSuccess(); // 结束下拉刷新,无参
            this.$previewRefresh();
            this.mescrollDown.page.num++;
          });
        });
      } else if (this.currentRoomSaveAction == 1) {
        getCloudRoomMsg({
          room_uuid: this.currentRoomUuid,
          page_no: this.mescrollDown.page.num,
          per_page: this.mescrollDown.page.size
        }).then(res => {
          let msgList = JSON.parse(JSON.stringify(this.msgList));
          let rawList = res.data.list;
          rawList.map(item => {
            item["msg"] = item["formatMsg"];
            delete item["formatMsg"];
            return item;
          });
          // 下拉加载新消息，添加到列表后�?          // 新消息按时间正序排列，最新的消息在最�?          msgList = msgList.concat(rawList);
          this.updateMsgList(msgList);
          this.$nextTick(() => {
            if (
              msgList.length >= res.data.page.count ||
              this.mescrollDown.page.num > 3
            ) {
              this.moreInfoShow = true;
              mescroll.lockDownScroll(true);
            }
            mescroll.endSuccess(); // 结束下拉刷新,无参
            this.$previewRefresh();
            this.mescrollDown.page.num++;
          });
        });
      }
    },
    handleFileOnChange(event) {
      let file = event.target.files[0];
      if (!!file) {
        //读取本地文件，以gbk编码方式输出
        var reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = e => {
          Loading.open("上传�?..");
          uploadFile({
            dataUrl: e.target.result,
            name: file.name,
            size: file.size,
            type: file.type
          })
            .then(res => {
              let file_path = process.env.VUE_APP_CLIENT_SOCKET + res.data.path;
              let file = `<a href='${file_path}' download='${res.data.name.split(".")[0]
                }'>${res.data.name.split(".")[0]}[文件]</a>`;
              Loading.close();
              chatSend({
                data: {
                  msg: file,
                  room_uuid: this.currentRoomUuid,
                  type: this.FILE,
                  save_action: this.currentRoomSaveAction
                }
              });
            })
            .catch(e => {
              Loading.close();
            });
        };
      }
    },
    handleImgOnChange(event) {
      let file = event.target.files[0];
      if (file.type.indexOf("image/") == -1) {
        Alert({ mes: "请上传图�?" });
        return;
      }
      lrz(file, { width: 1080 })
        .then(rst => {
          // 处理成功会执�?          if (rst.filelen > 204800) {
            Alert({ mes: "上传图片不能大于2M" });
          } else {
            this.reqImgData.imgDatas = rst.base64;
            this.cropperShow = true;
          }
          console.log(rst);
        })
        .catch(function (err) {
          // 处理失败会执�?          Toast({
            mes: err,
            icon: "error",
            timeout: 1500
          });
        })
        .always(function () {
          // 不管是成功失败，都会执行
        });
    },
    // 扩展API加载完毕，现在可以正常调用扩展API
    getCurrentPosition() {
      plus.geolocation.getCurrentPosition(
        function (p) {
          chatSend({
            data: {
              msg: p.addresses,
              room_uuid: this.currentRoomUuid,
              type: this.TEXT,
              save_action: this.currentRoomSaveAction
            }
          });
        },
        function (e) {
          switch (e.code) {
            case e.PERMISSION_DENIED:
              alert("User denied the request for Geolocation.");
              break;
            case e.POSITION_UNAVAILABLE:
              alert("Location information is unavailable.");
              break;
            case e.TIMEOUT:
              alert("The request to get user location timed out.");
              break;
            case e.UNKNOWN_ERROR:
              alert("An unknown error occurred.");
              break;
          }
        }
      );
    },
    sendMsg() {
      chatSend({
        data: {
          msg: this.content,
          room_uuid: this.currentRoomUuid,
          type: this.TEXT,
          save_action: this.currentRoomSaveAction
        }
      });
      document.getElementById("edit").innerHTML = "";
      this.content = "";
      this.closeDefIconsShow();
    },
    reSendMsg(key) {
      reChatSend({
        data: {
          room_uuid: this.currentRoomUuid,
          type: key.type,
          created_at: key.created_at,
          user_id: key.user_id,
          msg: key.msg,
          save_action: this.currentRoomSaveAction
        }
      });
    },
    handleContent(value) {
      this.content = value;
    },
    handleRecordShow(value) {
      //alert(value)
      if (value === "") {
        this.recordShow = !this.recordShow;
      } else {
        this.recordShow = value;
      }
    },
    closeDefIconsShow() {
      this.iconsShow = false;
      this.defsShow = false;
      this.recordShow = false;
      this.isPartChatPage = false;
      this.handleHeightToBottom();
    },
    handleSendShow() {
      if (this.content.length >= 1) {
        this.sendShow = true;
      } else {
        this.sendShow = false;
      }
    },
    /* 回滚到底部并重置预览图片 */
    handleMsgListToBottom(delayTime) {
      this.$nextTick(() => {
        setTimeout(() => {
          if (!this.lockDown) {
            const mscrollContainer = document.getElementsByClassName("mscroll-container");
            if (mscrollContainer && mscrollContainer.length > 0 && mscrollContainer[0]) {
              this.mescrollDom.scrollTop = mscrollContainer[0].scrollHeight;
            }
          }
          this.$previewRefresh();
          this.lockDown = false;
        }, delayTime);
      });
    },
    handleDefsShow() {
      //这边需要解决获取焦点后的再切换表情的bug
      document.getElementsByClassName("edit-div")[0].blur();
      if (this.defsShow) {
        this.isPartChatPage = false;
        this.handleHeightToBottom();
      } else {
        this.isPartChatPage = true;
        this.handleHeightToBottom();
      }
      this.defsShow = !this.defsShow;
      this.iconsShow = false;
      this.recordShow = false;
      this.handleSendShow();
      if (this.iconsShow == false && this.defsShow == false) {
        this.isPartChatPage = false;
        this.handleHeightToBottom();
      }
      this.handleMsgListToBottom(100);
    },
    handleIconsShow() {
      //这边需要解决获取焦点后的再切换表情的bug
      document.getElementsByClassName("edit-div")[0].blur();
      if (this.iconsShow) {
        this.isPartChatPage = false;
        this.handleHeightToBottom();
      } else {
        this.isPartChatPage = true;
        this.handleHeightToBottom();
      }
      this.iconsShow = !this.iconsShow;
      this.defsShow = false;
      this.recordShow = false;
      this.handleSendShow();
      if (this.iconsShow == false && this.defsShow == false) {
        this.isPartChatPage = false;
        this.handleHeightToBottom();
      }
      this.handleMsgListToBottom(100);
    },
    insertIcon(src) {
      this.content = `${this.content}<img src='${src}'>`;
    },
    handleStartRecord() {
      this.defsShow = false;
      this.iconsShow = false;
      this.recordingShow = true;
      this.touched = true;
      if (window.plus) {
        if (window.r == null) {
          this.recordingShow = false;
          this.touched = false;
          return;
        }
        try {
          // 安全地停止之前的录音
          if (typeof window.r.stop === 'function') {
            window.r.stop();
          }
          // 开始新的录�?          if (typeof window.r.record === 'function') {
            window.r.record(
              { filename: "_doc/audio/" },
              p => {
                console.log("录音完成:" + p);
                //上传
                this.Audio2dataURL(p);
              },
              e => {
                console.log("录音出错", e);
                this.recordingShow = false;
                this.touched = false;
              }
            );
          } else {
            console.error('录音�?record 方法不可�?);
            this.recordingShow = false;
            this.touched = false;
          }
        } catch (error) {
          console.error('录音开始错�?', error);
          this.recordingShow = false;
          this.touched = false;
        }
      } else {
        //使用H5录音
        try {
          recOpen(function () {
            recStart();
          }, () => {
            this.recordingShow = false
            this.touched = false;
          });
        } catch (error) {
          console.error('H5录音开始错�?', error);
          this.recordingShow = false;
          this.touched = false;
        }
      }
    },
    recordStop() {
      let that = this;
      recStop(blob => {
        // 检查blob是否有效
        if (!blob) {
          console.warn('录音数据为空，无法上�?);
          this.recordingShow = false;
          this.touched = false;
          return;
        }
        
        // name
        const filename =
          this.currentRoomUuid +
          this.userInfo.id +
          new Date().getTime() +
          ".amr";
        // blob转file
        var file = new File([blob], filename, {
          type: "amr",
          lastModified: Date.now()
        });
        var reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = e => {
          uploadFile({
            dataUrl: e.target.result,
            name: filename,
            size: file.size,
            type: "amr"
          }).then(res => {
            var BenzAMRRecorder = require("benz-amr-recorder");
            var amr = new BenzAMRRecorder();
            const url = process.env.VUE_APP_CLIENT_SOCKET + res.data.path;
            amr
              .initWithUrl(url)
              .then(() => {
                chatSend({
                  data: {
                    msg: JSON.stringify({
                      url: url,
                      duration: amr.getDuration(),
                      status: false
                    }),
                    room_uuid: that.currentRoomUuid,
                    type: that.RECORD,
                    save_action: that.currentRoomSaveAction
                  }
                });
                that.recordingShow = false;
                that.touched = false;
              })
              .catch(e => {
                console.log(e);
                that.recordingShow = false;
                that.touched = false;
              });
          });
        };
      });
    },
    /**
     * 录音语音文件转base64字符�?     * @param {Object} path
     */
    Audio2dataURL(path) {
      let that = this;
      plus.io.resolveLocalFileSystemURL(path, function (entry) {
        entry.file(
          function (file) {
            var reader = new plus.io.FileReader();
            reader.onloadend = function (e) {
              uploadFile({
                dataUrl: e.target.result,
                name: file.name,
                size: file.size,
                type: file.type
              }).then(res => {
                that.recordingShow = false;
                var BenzAMRRecorder = require("benz-amr-recorder");
                var amr = new BenzAMRRecorder();
                let url = process.env.VUE_APP_CLIENT_SOCKET + res.data.path;
                amr
                  .initWithUrl(url)
                  .then(function () {
                    chatSend({
                      data: {
                        msg: JSON.stringify({
                          url: url,
                          duration: amr.getDuration(),
                          status: false
                        }),
                        room_uuid: that.currentRoomUuid,
                        type: that.RECORD,
                        save_action: that.currentRoomSaveAction
                      }
                    });
                  })
                  .catch(e => {
                    console.log(e);
                  });
              });
            };
            reader.readAsDataURL(file);
          },
          function (e) {
            console.log("读写出现异常: " + e.message);
          }
        );
      });
    },
    amrPlay(rawData, index) {
      let that = this;
      let data = JSON.parse(JSON.stringify(rawData));
      let msgList = JSON.parse(JSON.stringify(this.msgList));
      data["status"] = true;
      msgList[index]["msg"] = JSON.stringify(data);
      this.$store.dispatch("updateMsgList", msgList);
      var BenzAMRRecorder = require("benz-amr-recorder");
      var amr = new BenzAMRRecorder();
      amr.initWithUrl(data.url).then(function () {
        amr.play();
      });
      amr.onEnded(() => {
        let data = JSON.parse(JSON.stringify(rawData));
        let msgList = JSON.parse(JSON.stringify(this.msgList));
        data["status"] = false;
        msgList[index]["msg"] = JSON.stringify(data);
        this.$store.dispatch("updateMsgList", msgList);
      });
    },
    recReqImgData(value) {
      this.reqImgData.imgDatas = value;
    },
    recCropperShow(value) {
      this.cropperShow = value;
    },
    formatTime(value) {
      return utils.time.formatDate(value, "yyyy-MM-dd hh:mm:ss");
    },
    formatImgPath(msg) {
      console.log("msg",msg)
      try {
        if (msg) {
          var pat = /src='(.+?)'/;
          let url = pat.exec(msg)[1];
          return url;
        }
      } catch (e) {
        return "解析错误";
      }
    },
    formatFileName(msg) {
      try {
        if (msg) {
          var pat = /href='(.+?)'/;
          let url = pat.exec(msg)[1];
          return url.split("uploads/")[1];
        }
      } catch (e) {
        return "解析错误";
      }
    },
    handleDefMsg(msg) {
      if (msg.indexOf("download") != -1) {
        var pat = /href='(.+?)'/;
        let url = pat.exec(msg)[1];
        axios({
          method: "get",
          url: url,
          timeout: 3000,
          headers: {},
          responseType: "blob"
        })
          .then(res => {
            const blob = new Blob([res.data]); //处理文档�?            const fileName = url.split("uploads/")[1];
            const elink = document.createElement("a");
            elink.download = fileName;
            elink.style.display = "none";
            elink.href = URL.createObjectURL(blob);
            document.body.appendChild(elink);
            elink.click();
            URL.revokeObjectURL(elink.href); // 释放URL 对象
            document.body.removeChild(elink);
          })
          .catch(res => {
            console.log(res);
          });
      }
    }
  },
  watch: {
    //监听聊天数据变动
    content: "handleSendShow",
    data: "handleSendShow",
    msgList: {
      handler(newValue, oldValue) {
        if (newValue.length !== oldValue.length) {
          this.handleMsgListToBottom(100);
        }
      }
    },
    recordShow(newVal, oldVal) {
      if (!newVal) {
        try {
          if (window.plus && window.r && typeof window.r.stop === 'function') {
            window.r.stop();
          }
          this.recordStop();
        } catch (error) {
          console.error('录音停止错误:', error);
          // 确保状态重�?          this.recordingShow = false;
          this.touched = false;
        }
      }
    }
  }
};
</script>
<style lang="scss" scoped>
@import "@/assets/scss/base.scss";
@import "@/assets/scss/public.scss";
@import "./scss/room";
</style>
